package templates

import (
	"fmt"

	"github.com/Aidunlin/go-srm/app"
)

templ recordsFilterAll(params app.RecordTableParams) {
	<a
		if len(params.Filter) == 0 {
			class="btn me-2 btn-dark fw-bold"
			aria-current="true"
		} else {
			class="btn me-2 btn-light border"
		}
		href={ params.QueryString(nil, "filter", "page") }
	>
		All
	</a>
}

templ recordsFilterLetter(letter string, params app.RecordTableParams) {
	<a
		if params.Filter == letter {
			class="btn text-uppercase btn-dark fw-bold"
			aria-current="true"
		} else {
			class="btn text-uppercase btn-light border"
		}
		href={ params.QueryString(app.ParamMap{"filter": letter}, "page") }
		title={ fmt.Sprintf("Letter %v", letter) }
	>
		{ letter }
	</a>
}

templ recordsFilterControls(params app.RecordTableParams) {
	<div class="mb-3">
		<span class="d-block">
			Filter by <strong>Last Name</strong>
		</span>
		@recordsFilterAll(params)
		for letter := 'a'; letter <= 'z'; letter++ {
			@recordsFilterLetter(string(letter), params)
		}
	</div>
}

templ recordsCount(totalRecords int64) {
	if totalRecords == 0 {
		<p class="alert alert-warning" role="alert">
			No records found.
		</p>
	} else {
		<p class="alert alert-info" role="alert">
			{ fmt.Sprint(totalRecords) }
			if totalRecords == 1 {
				record
			} else {
				records
			}
			found.
		</p>
	}
}

templ recordsMessages(messageParams app.MessageParams) {
	if len(messageParams.Success) > 0 {
		<p class="alert alert-success" role="alert">
			{ messageParams.Success }
		</p>
	}
	if len(messageParams.Error) > 0 {
		<p class="alert alert-warning" role="alert">
			Error: { messageParams.Error }
		</p>
	}
}

templ recordsSortMenuItem(column app.StudentRecordColumn, params app.RecordTableParams) {
	<li>
		<a
			if column.Name == params.Sortby {
				class="dropdown-item text-bg-dark"
				if params.Order == "asc" {
					href={ params.QueryString(app.ParamMap{"order": "desc"}) }
				} else {
					href={ params.QueryString(app.ParamMap{"order": "asc"}) }
				}
			} else {
				class="dropdown-item text-bg-white"
				href={ params.QueryString(app.ParamMap{"sortby": column.Name, "order": "asc"}) }
			}
			title={ fmt.Sprintf("Sort by %v", column.Title) }
		>
			{ column.Title }
		</a>
	</li>
}

templ recordsSortOrder(order, label string, params app.RecordTableParams) {
	<a
		if params.Order == order {
			class="btn btn-dark border"
			aria-current="true"
		} else {
			class="btn btn-light border"
		}
		href={ params.QueryString(app.ParamMap{"order": order}, "page") }
		title={ fmt.Sprintf("%v Order", label) }
	>
		{ label }
	</a>
}

templ recordsSortControls(params app.RecordTableParams) {
	<div class="mb-3">
		<span class="d-block">
			Sort by <strong>Column</strong>
			and <strong>Order</strong>
		</span>
		<div class="dropdown d-inline-block">
			<button
				class="btn btn-light border dropdown-toggle me-2"
				title="Columns"
				type="button"
				data-bs-toggle="dropdown"
			>
				{ app.GetColumnLabel(params.Sortby) }
			</button>
			<ul class="dropdown-menu">
				for _, column := range app.GetColumns() {
					@recordsSortMenuItem(column, params)
				}
			</ul>
		</div>
		<div class="btn-group">
			@recordsSortOrder("asc", "Ascending", params)
			@recordsSortOrder("desc", "Descending", params)
		</div>
	</div>
}

templ recordsPagination(params app.RecordTableParams, pages int) {
	if pages > 1 {
		<div class="mb-3">
			<span class="d-block">
				Page <strong>{ fmt.Sprint(params.Page) }</strong>
				of <strong>{ fmt.Sprint(pages) }</strong>
			</span>
			if params.Page == 1 {
				<span class="btn me-2 border disabled" title="Previous page">
					Previous
				</span>
			} else {
				<a
					class="btn me-2 btn-light border"
					href={ params.QueryString(app.ParamMap{"page": fmt.Sprint(params.Page - 1)}) }
					title="Previous page"
				>
					Previous
				</a>
			}
			<div class="d-inline me-2">
				for i := 1; i <= pages; i++ {
					<a
						if params.Page == i {
							class="btn btn-dark"
							aria-current="true"
						} else {
							class="btn btn-light border"
						}
						href={ params.QueryString(app.ParamMap{"page": fmt.Sprint(i)}) }
						title={ fmt.Sprintf("Page %v", i) }
					>
						{ fmt.Sprint(i) }
					</a>
				}
			</div>
			if params.Page == pages {
				<span class="btn me-2 border disabled" title="Next page">
					Next
				</span>
			} else {
				<a
					class="btn me-2 btn-light border"
					href={ params.QueryString(app.ParamMap{"page": fmt.Sprint(params.Page + 1)}) }
					title="Next page"
				>
					Next
				</a>
			}
		</div>
	}
}

templ recordsHeaderColumn(column app.StudentRecordColumn, params app.RecordTableParams) {
	<th class="p-1 pt-0">
		<a
			if column.Name == params.Sortby {
				class="btn px-2 w-100 fw-bold btn-dark"
				aria-current="true"
				if params.Order == "asc" {
					href={ params.QueryString(app.ParamMap{"order": "desc"}, "page") }
				} else {
					href={ params.QueryString(app.ParamMap{"order": "asc"}, "page") }
				}
			} else {
				class="btn px-2 w-100 fw-bold btn-light text-black border"
				href={ params.QueryString(app.ParamMap{"sortby": column.Name, "order": "asc"}, "page") }
			}
			title={ fmt.Sprintf("Sort by %v", column.Title) }
		>
			{ column.Label }
		</a>
	</th>
}

script confirmPopup(message string) {
    return confirm(message);
}

templ recordRowActions(record app.StudentRecord) {
	<td class="p-1">
		<a
			class="px-2 py-1 dropdown-toggle dropdown-symbol-none btn btn-light text-black border w-100"
			role="button"
			data-bs-toggle="dropdown"
			href="#"
			title={ fmt.Sprintf("Actions for %v", record.FirstName) }
		>
			▼
		</a>
		<div class="dropdown">
			<ul class="dropdown-menu">
				<li>
					<a class="dropdown-item" href={ templ.URL(fmt.Sprintf("update-record.php?id=%v", record.Id)) }>
						Update { record.FirstName }
					</a>
				</li>
				<li>
					<a
						class="dropdown-item link-danger"
						href={ templ.URL(fmt.Sprintf("/delete/%v", record.Id)) }
						onClick={ confirmPopup(fmt.Sprintf("Are you sure you want to delete %v?", record.FirstName)) }
					>
						Delete { record.FirstName }
					</a>
				</li>
			</ul>
		</div>
	</td>
}

templ recordRow(record app.StudentRecord) {
	<tr>
		@recordRowActions(record)
		<td class="text-end">
			{ fmt.Sprint(record.StudentId) }
		</td>
		<td>
			<strong>
				{ record.FirstName }
			</strong>
		</td>
		<td>
			<strong>
				{ record.LastName }
			</strong>
		</td>
		<td class="p-1">
			<span
				if record.Gpa <= 2 {
					class="d-block p-1 rounded text-center text-bg-danger"
				} else {
					if record.Gpa >= 3.5 {
						class="d-block p-1 rounded text-center text-bg-success"
					} else {
						class="d-block p-1 rounded text-center"
					}
				}
			>
				{ fmt.Sprintf("%2.2f", record.Gpa) }
			</span>
		</td>
		<td>
			if len(record.DegreeProgram) > 0 {
				{ record.DegreeProgram }
			} else {
				<em>
					Undeclared
				</em>
			}
		</td>
		<td class="text-center">
			{ app.DisplayDate(record.GraduationDate) }
		</td>
		<td class="text-center">
			if record.FinancialAid != 0 {
				✅
			}
		</td>
		<td>
			{ record.Email }
		</td>
		<td class="text-center">
			{ record.Phone }
		</td>
	</tr>
}

templ recordsTable(records []app.StudentRecord, params app.RecordTableParams) {
	<div class="table-responsive text-nowrap mb-3">
		<table class="table table-hover table-borderless mt-1 mb-0">
			<thead>
				<tr>
					<td></td>
					for _, column := range app.GetColumns() {
						@recordsHeaderColumn(column, params)
					}
				</tr>
			</thead>
			for _, record := range records {
				@recordRow(record)
			}
		</table>
	</div>
}

templ IndexPage(totalRecords int64, records []app.StudentRecord, tableParams app.RecordTableParams, messageParams app.MessageParams) {
	@page("/", "Record Management") {
		<main class="container-xxl my-5">
			<h2 class="alert alert-primary">
				Record Management
			</h2>
			@recordsFilterControls(tableParams)
			@recordsCount(totalRecords)
			@recordsMessages(messageParams)
			if (len(records) > 0) {
				@recordsSortControls(tableParams)
				@recordsPagination(tableParams, app.GetTotalPages(totalRecords))
				@recordsTable(records, tableParams)
				@recordsPagination(tableParams, app.GetTotalPages(totalRecords))
			}
		</main>
	}
}
