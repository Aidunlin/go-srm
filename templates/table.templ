package templates

import (
	"fmt"
	"strings"

	"github.com/Aidunlin/go-srm/query"
	"github.com/Aidunlin/go-srm/model"
	"github.com/Aidunlin/go-srm/value"
)

templ studentsFilterAll() {
	<a
		if len(model.GetStudentTableParams(ctx).Filter) == 0 {
			class="btn me-2 btn-dark fw-bold"
			aria-current="true"
		} else {
			class="btn me-2 btn-light border"
		}
		href={ query.New(ctx).WithTableParams().Without("filter", "page").Build() }
	>
		All
	</a>
}

templ studentsFilterLetter(letter string) {
	<a
		if model.GetStudentTableParams(ctx).Filter == letter {
			class="btn text-uppercase btn-dark fw-bold"
			aria-current="true"
		} else {
			class="btn text-uppercase btn-light border"
		}
		href={ query.New(ctx).WithTableParams().With("filter", letter).Without("page").Build() }
		title={ fmt.Sprintf("Letter %v", strings.ToUpper(letter)) }
	>
		{ letter }
	</a>
}

templ studentsFilterControls() {
	<div class="mb-3">
		<span class="d-block">
			Filter by <strong>Last Name</strong>
		</span>
		@studentsFilterAll()
		for letter := 'a'; letter <= 'z'; letter++ {
			@studentsFilterLetter(string(letter))
		}
	</div>
}

templ studentsCount(totalStudents int64) {
	if totalStudents == 0 {
		<p class="alert alert-warning" role="alert">
			No students found.
		</p>
	} else {
		<p class="alert alert-info" role="alert">
			{ fmt.Sprint(totalStudents) }
			if totalStudents == 1 {
				student
			} else {
				students
			}
			found.
		</p>
	}
}

templ studentsMessages() {
	if len(model.GetMessageParams(ctx).Success) > 0 {
		<p class="alert alert-success" role="alert">
			{ model.GetMessageParams(ctx).Success }
		</p>
	}
	if len(model.GetMessageParams(ctx).Error) > 0 {
		<p class="alert alert-warning" role="alert">
			Error: { model.GetMessageParams(ctx).Error }
		</p>
	}
}

templ studentsSortMenuItem(column model.StudentColumn) {
	<li>
		<a
			if column.Name == model.GetStudentTableParams(ctx).Sortby {
				class="dropdown-item text-bg-dark"
				if model.GetStudentTableParams(ctx).Order == "asc" {
					href={ query.New(ctx).WithTableParams().WithAdvancedSearch().With("order", "desc").Build() }
				} else {
					href={ query.New(ctx).WithTableParams().WithAdvancedSearch().With("order", "asc").Build() }
				}
			} else {
				class="dropdown-item text-bg-white"
				href={ query.New(ctx).WithTableParams().WithAdvancedSearch().With("sortby", column.Name).With("order", "asc").Build() }
			}
			title={ fmt.Sprintf("Sort by %v", column.Title()) }
		>
			{ column.Title() }
		</a>
	</li>
}

templ studentsSortOrder(order, label string) {
	<a
		if model.GetStudentTableParams(ctx).Order == order {
			class="btn btn-dark border"
			aria-current="true"
		} else {
			class="btn btn-light border"
		}
		href={ query.New(ctx).WithTableParams().WithAdvancedSearch().With("order", order).Without("page").Build() }
		title={ fmt.Sprintf("%v Order", label) }
	>
		{ label }
	</a>
}

templ studentsSortControls() {
	<div class="mb-3">
		<span class="d-block">
			Sort by <strong>Column</strong>
			and <strong>Order</strong>
		</span>
		<div class="dropdown d-inline-block">
			<button
				class="btn btn-light border dropdown-toggle me-2"
				title="Columns"
				type="button"
				data-bs-toggle="dropdown"
			>
				{ model.GetStudentColumn(model.GetStudentTableParams(ctx).Sortby).Label }
			</button>
			<ul class="dropdown-menu">
				for _, column := range model.GetStudentColumns() {
					@studentsSortMenuItem(column)
				}
			</ul>
		</div>
		<div class="btn-group">
			@studentsSortOrder("asc", "Ascending")
			@studentsSortOrder("desc", "Descending")
		</div>
	</div>
}

templ studentsPagination(pages int) {
	if pages > 1 {
		<div class="mb-3">
			<span class="d-block">
				Page <strong>{ fmt.Sprint(model.GetStudentTableParams(ctx).Page) }</strong>
				of <strong>{ fmt.Sprint(pages) }</strong>
			</span>
			if model.GetStudentTableParams(ctx).Page == 1 {
				<span class="btn me-2 border disabled" title="Previous page">
					Previous
				</span>
			} else {
				<a
					class="btn me-2 btn-light border"
					href={ query.New(ctx).WithTableParams().WithAdvancedSearch().With("page", fmt.Sprint(model.GetStudentTableParams(ctx).Page-1)).Build() }
					title="Previous page"
				>
					Previous
				</a>
			}
			<div class="d-inline me-2">
				for i := 1; i <= pages; i++ {
					<a
						if model.GetStudentTableParams(ctx).Page == i {
							class="btn btn-dark"
							aria-current="true"
						} else {
							class="btn btn-light border"
						}
						href={ query.New(ctx).WithTableParams().WithAdvancedSearch().With("page", fmt.Sprint(i)).Build() }
						title={ fmt.Sprintf("Page %v", i) }
					>
						{ fmt.Sprint(i) }
					</a>
				}
			</div>
			if model.GetStudentTableParams(ctx).Page == pages {
				<span class="btn me-2 border disabled" title="Next page">
					Next
				</span>
			} else {
				<a
					class="btn me-2 btn-light border"
					href={ query.New(ctx).WithTableParams().WithAdvancedSearch().With("page", fmt.Sprint(model.GetStudentTableParams(ctx).Page+1)).Build() }
					title="Next page"
				>
					Next
				</a>
			}
		</div>
	}
}

templ studentColumnHeader(column model.StudentColumn) {
	<th class="p-1 pt-0">
		<a
			if column.Name == model.GetStudentTableParams(ctx).Sortby {
				class="btn px-2 w-100 fw-bold btn-dark"
				aria-current="true"
				if model.GetStudentTableParams(ctx).Order == "asc" {
					href={ query.New(ctx).WithTableParams().WithAdvancedSearch().With("order", "desc").Without("page").Build() }
				} else {
					href={ query.New(ctx).WithTableParams().WithAdvancedSearch().With("order", "asc").Without("page").Build() }
				}
			} else {
				class="btn px-2 w-100 fw-bold btn-light text-black border"
				href={ query.New(ctx).WithTableParams().WithAdvancedSearch().With("sortby", column.Name).With("order", "asc").Without("page").Build() }
			}
			title={ fmt.Sprintf("Sort by %v", column.Title()) }
		>
			{ column.Label }
		</a>
	</th>
}

script confirmPopup(message string) {
    return confirm(message);
}

templ studentRowActions(student model.StudentRecord) {
	<td class="p-1">
		<a
			class="px-2 py-1 dropdown-toggle dropdown-symbol-none btn btn-light text-black border w-100"
			role="button"
			data-bs-toggle="dropdown"
			href="#"
			title={ fmt.Sprintf("Actions for %v", student.FirstName) }
		>
			▼
		</a>
		<div class="dropdown">
			<ul class="dropdown-menu">
				<li>
					<a class="dropdown-item" href={ templ.URL(fmt.Sprintf("/update/%v", student.Id)) }>
						Update { student.FirstName }
					</a>
				</li>
				<li>
					<a
						class="dropdown-item link-danger"
						href={ templ.URL(fmt.Sprintf("/delete/%v", student.Id)) }
						onClick={ confirmPopup(fmt.Sprintf("Are you sure you want to delete %v?", student.FirstName)) }
					>
						Delete { student.FirstName }
					</a>
				</li>
			</ul>
		</div>
	</td>
}

templ studentRow(student model.StudentRecord) {
	<tr>
		@studentRowActions(student)
		<td class="text-end">
			{ fmt.Sprint(student.Id) }
		</td>
		<td>
			<strong>
				{ student.FirstName }
			</strong>
		</td>
		<td>
			<strong>
				{ student.LastName }
			</strong>
		</td>
		<td class="p-1">
			<span
				if student.Gpa <= 2 {
					class="d-block p-1 rounded text-center text-bg-danger"
				} else {
					if student.Gpa >= 3.5 {
						class="d-block p-1 rounded text-center text-bg-success"
					} else {
						class="d-block p-1 rounded text-center"
					}
				}
			>
				{ fmt.Sprintf("%2.2f", student.Gpa) }
			</span>
		</td>
		<td>
			if len(student.DegreeProgram) > 0 {
				{ student.DegreeProgram }
			} else {
				<em>
					Undeclared
				</em>
			}
		</td>
		<td class="text-center">
			if len(student.GraduationDate) > 0 {
				{ value.DisplayDate(student.GraduationDate) }
			} else {
				<em>
					Unset
				</em>
			}
		</td>
		<td class="text-center">
			if student.FinancialAid != 0 {
				✅
			}
		</td>
		<td>
			{ student.Email }
		</td>
		<td class="text-center">
			{ student.Phone }
		</td>
	</tr>
}

templ studentsTable(students []model.StudentRecord) {
	<div class="table-responsive text-nowrap mb-3">
		<table class="table table-hover table-borderless mt-1 mb-0">
			<thead>
				<tr>
					<td></td>
					for _, column := range model.GetStudentColumns() {
						@studentColumnHeader(column)
					}
				</tr>
			</thead>
			for _, student := range students {
				@studentRow(student)
			}
		</table>
	</div>
}
